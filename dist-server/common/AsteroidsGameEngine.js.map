{"version":3,"sources":["../../src/common/AsteroidsGameEngine.js"],"names":["RoCrowsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","Object","assign","lives","shipSize","shipTurnSpeed","shipSpeed","bulletRadius","bulletLifeTime","asteroidRadius","numAsteroidLevels","numAsteroidVerts","maxAsteroidSpeed","spaceWidth","spaceHeight","SHIP","Math","pow","BULLET","ASTEROID","aviaryRadius","forEachObject","id","obj","p","position","x","y","refreshToPhysics","serializer","registerClass","Ship","Aviary","Bullet","inputData","playerId","playerShip","queryObject","instanceType","input","physicsObj","applyForceLocal","angle","emit","refreshFromPhysics","random","s","mass","angularVelocity","TwoVector","velocity","addObjectToWorld","rand","vx","vy","va","a","asteroid","bullet","asteroidBody","level","r","removeObjectFromWorld","angleDisturb","PI","i","subAsteroid","Asteroid","cos","sin","trace","info","toString","GameEngine"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,iB;;;;;AAEjB,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,8BAAMA,OAAN,EADiB,CAGjB;;AACA,UAAKC,aAAL,GAAqB,IAAIC,wBAAJ,CAAoB;AAAEC,MAAAA,UAAU;AAAZ,KAApB,CAArB;AACA,UAAKF,aAAL,CAAmBG,KAAnB,CAAyBC,sBAAzB,CAAgDC,QAAhD,GAA2D,CAA3D;;AACA,UAAKC,EAAL,CAAQ,UAAR,EAAoB,MAAKC,OAAL,CAAaC,IAAb,+BAApB,EANiB,CAQjB;;;AACAC,IAAAA,MAAM,CAACC,MAAP,gCAAoB;AAChBC,MAAAA,KAAK,EAAE,CADS;AACNC,MAAAA,QAAQ,EAAE,GADJ;AACSC,MAAAA,aAAa,EAAE,IADxB;AAC8BC,MAAAA,SAAS,EAAE,CADzC;AAC4CC,MAAAA,YAAY,EAAE,IAD1D;AACgEC,MAAAA,cAAc,EAAE,EADhF;AAEhBC,MAAAA,cAAc,EAAE,GAFA;AAEKC,MAAAA,iBAAiB,EAAE,CAFxB;AAE2BC,MAAAA,gBAAgB,EAAE,CAF7C;AAEgDC,MAAAA,gBAAgB,EAAE,CAFlE;AAGhBC,MAAAA,UAAU,EAAE,EAHI;AAGAC,MAAAA,WAAW,EAAE,CAHb;AAGgBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAHtB;AAGsCC,MAAAA,MAAM,EAAEF,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAH9C;AAG8DE,MAAAA,QAAQ,EAAEH,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAZ,CAHxE;AAKhBG,MAAAA,YAAY,EAAE;AALE,KAApB;AATiB;AAgBpB,G,CAED;;;;;8BACU;AAAA;;AACN,WAAKzB,KAAL,CAAW0B,aAAX,CAAyB,UAACC,EAAD,EAAKC,GAAL,EAAa;AAClC,YAAIC,CAAC,GAAGD,GAAG,CAACE,QAAZ;AACA,YAAGD,CAAC,CAACE,CAAF,GAAM,MAAI,CAACb,UAAL,GAAgB,CAAzB,EAA4BW,CAAC,CAACE,CAAF,GAAM,CAAC,MAAI,CAACb,UAAN,GAAiB,CAAvB;AAC5B,YAAGW,CAAC,CAACG,CAAF,GAAM,MAAI,CAACb,WAAL,GAAiB,CAA1B,EAA6BU,CAAC,CAACG,CAAF,GAAM,CAAC,MAAI,CAACb,WAAN,GAAkB,CAAxB;AAC7B,YAAGU,CAAC,CAACE,CAAF,GAAM,CAAC,MAAI,CAACb,UAAN,GAAkB,CAA3B,EAA8BW,CAAC,CAACE,CAAF,GAAM,MAAI,CAACb,UAAL,GAAgB,CAAtB;AAC9B,YAAGW,CAAC,CAACG,CAAF,GAAM,CAAC,MAAI,CAACb,WAAN,GAAkB,CAA3B,EAA8BU,CAAC,CAACG,CAAF,GAAM,MAAI,CAACb,WAAL,GAAiB,CAAvB;AAC9BS,QAAAA,GAAG,CAACK,gBAAJ;AACH,OAPD;AAQH;;;oCAEeC,U,EAAY;AACxBA,MAAAA,UAAU,CAACC,aAAX,CAAyBC,gBAAzB;AACAF,MAAAA,UAAU,CAACC,aAAX,CAAyBE,kBAAzB;AACAH,MAAAA,UAAU,CAACC,aAAX,CAAyBG,kBAAzB;AACH;;;iCAEYC,S,EAAWC,Q,EAAU;AAE9B,0FAAmBD,SAAnB,EAA8BC,QAA9B,EAF8B,CAI9B;;;AACA,UAAIC,UAAU,GAAG,KAAKzC,KAAL,CAAW0C,WAAX,CAAuB;AAAEF,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBG,QAAAA,YAAY,EAAEP;AAApC,OAAvB,CAAjB;;AACA,UAAIK,UAAJ,EAAgB;AACZ,YAAIF,SAAS,CAACK,KAAV,KAAoB,IAAxB,EAA8BH,UAAU,CAACI,UAAX,CAAsBC,eAAtB,CAAsC,CAAC,CAAD,EAAI,KAAKnC,SAAT,CAAtC,EAA9B,KACK,IAAI4B,SAAS,CAACK,KAAV,KAAoB,OAAxB,EAAiCH,UAAU,CAACI,UAAX,CAAsBE,KAAtB,IAA+B,KAAKrC,aAApC,CAAjC,KACA,IAAI6B,SAAS,CAACK,KAAV,KAAoB,MAAxB,EAAgCH,UAAU,CAACI,UAAX,CAAsBE,KAAtB,IAA+B,KAAKrC,aAApC,CAAhC,KACA,IAAI6B,SAAS,CAACK,KAAV,KAAoB,OAAxB,EAAiC,KAAKI,IAAL,CAAU,OAAV,EAAmBP,UAAnB;AACtCA,QAAAA,UAAU,CAACQ,kBAAX;AACH;AACJ,K,CAED;;;;2BACO;AACH,aAAO5B,IAAI,CAAC6B,MAAL,KAAgB,GAAvB;AACH,K,CAED;;;;4BACQV,Q,EAAU;AACd,UAAIW,CAAC,GAAG,IAAIf,gBAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB;AACvBI,QAAAA,QAAQ,EAAEA,QADa;AAEvBY,QAAAA,IAAI,EAAE,EAFiB;AAEbC,QAAAA,eAAe,EAAE,CAFJ;AAGvBvB,QAAAA,QAAQ,EAAE,IAAIwB,kBAAJ,CAAc,CAAd,EAAiB,CAAjB,CAHa;AAGQC,QAAAA,QAAQ,EAAE,IAAID,kBAAJ,CAAc,CAAd,EAAiB,CAAjB;AAHlB,OAAnB,CAAR;AAKAH,MAAAA,CAAC,CAAC3C,KAAF,GAAU,KAAKA,KAAf;AACA,WAAKgD,gBAAL,CAAsBL,CAAtB;AACH,K,CAED;;;;gCACY;AACR,UAAIpB,CAAC,GAAG,KAAK0B,IAAL,KAAc,KAAKvC,UAA3B;AACA,UAAIc,CAAC,GAAG,KAAKyB,IAAL,KAAc,KAAKtC,WAA3B;AACA,UAAIuC,EAAE,GAAG,CAAT;AACA,UAAIC,EAAE,GAAG,CAAT;AACA,UAAIC,EAAE,GAAG,CAAT;AAEA,UAAIC,CAAC,GAAG,IAAIxB,kBAAJ,CAAW,IAAX,EAAiB,EAAjB,EAAqB;AACzBe,QAAAA,IAAI,EAAE,EADmB;AAEzBtB,QAAAA,QAAQ,EAAE,IAAIwB,kBAAJ,CAAcvB,CAAd,EAAiBC,CAAjB,CAFe;AAGzBuB,QAAAA,QAAQ,EAAE,IAAID,kBAAJ,CAAcI,EAAd,EAAkBC,EAAlB,CAHe;AAIzBN,QAAAA,eAAe,EAAEO;AAJQ,OAArB,CAAR;AAMA,WAAKJ,gBAAL,CAAsBK,CAAtB;AACH,K,CAED;;;;4BACQC,Q,EAAUC,M,EAAQ;AAAA;;AAEtB;AACA,UAAIC,YAAY,GAAGF,QAAQ,CAACjB,UAA5B;AACA,UAAIoB,KAAK,GAAGH,QAAQ,CAACG,KAArB;AACA,UAAIlC,CAAC,GAAGiC,YAAY,CAAClC,QAAb,CAAsB,CAAtB,CAAR;AACA,UAAIE,CAAC,GAAGgC,YAAY,CAAClC,QAAb,CAAsB,CAAtB,CAAR;AACA,UAAIoC,CAAC,GAAG,KAAKpD,cAAL,IAAuB,KAAKC,iBAAL,GAAyBkD,KAAhD,IAAyD,KAAKlD,iBAAtE;AACA,WAAKoD,qBAAL,CAA2BL,QAA3B;AACA,WAAKK,qBAAL,CAA2BJ,MAA3B,EATsB,CAWtB;;AACA,UAAIE,KAAK,GAAG,CAAZ,EAAe;AACX,YAAIG,YAAY,GAAG/C,IAAI,CAACgD,EAAL,GAAQ,CAAR,GAAYhD,IAAI,CAAC6B,MAAL,EAA/B;;AADW,mCAEFoB,CAFE;AAGP,cAAIvB,KAAK,GAAG1B,IAAI,CAACgD,EAAL,GAAQ,CAAR,GAAYC,CAAZ,GAAgBF,YAA5B;AACA,cAAIG,WAAW,GAAG,IAAIC,QAAJ,CAAa,MAAb,EAAmB,EAAnB,EAAuB;AACrCpB,YAAAA,IAAI,EAAE,EAD+B;AAErCtB,YAAAA,QAAQ,EAAE,IAAIwB,kBAAJ,CAAcvB,CAAC,GAAGmC,CAAC,GAAG7C,IAAI,CAACoD,GAAL,CAAS1B,KAAT,CAAtB,EAAuCf,CAAC,GAAGkC,CAAC,GAAG7C,IAAI,CAACqD,GAAL,CAAS3B,KAAT,CAA/C,CAF2B;AAGrCQ,YAAAA,QAAQ,EAAE,IAAID,kBAAJ,CAAc,MAAI,CAACG,IAAL,EAAd,EAA2B,MAAI,CAACA,IAAL,EAA3B;AAH2B,WAAvB,CAAlB;AAKAc,UAAAA,WAAW,CAACN,KAAZ,GAAoBA,KAAK,GAAG,CAA5B;;AACA,UAAA,MAAI,CAACU,KAAL,CAAWC,IAAX,CAAgB;AAAA,+DAA2CV,CAA3C,eAAiDK,WAAW,CAACM,QAAZ,EAAjD;AAAA,WAAhB;;AACA,UAAA,MAAI,CAACrB,gBAAL,CAAsBe,WAAtB;AAXO;;AAEX,aAAK,IAAID,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AAAA,gBAAfA,CAAe;AAUvB;AACJ;AACJ;;;;EAjH0CQ,mB","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\r\nimport Aviary from './Aviary';\r\nimport Bullet from './Bullet';\r\nimport Ship from './Ship';\r\n\r\nexport default class RoCrowsGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        // create physics with no friction; wrap positions after each step\r\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\r\n        this.physicsEngine.world.defaultContactMaterial.friction = 0;\r\n        this.on('postStep', this.warpAll.bind(this));\r\n\r\n        // game variables\r\n        Object.assign(this, {\r\n            lives: 3, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\r\n            asteroidRadius: 0.9, numAsteroidLevels: 4, numAsteroidVerts: 6, maxAsteroidSpeed: 2,\r\n            spaceWidth: 16, spaceHeight: 9, SHIP: Math.pow(2, 1), BULLET: Math.pow(2, 2), ASTEROID: Math.pow(2, 3),\r\n\r\n            aviaryRadius: 0.1\r\n        });\r\n    }\r\n\r\n    // If the body is out of space bounds, warp it to the other side\r\n    warpAll() {\r\n        this.world.forEachObject((id, obj) => {\r\n            let p = obj.position;\r\n            if(p.x > this.spaceWidth/2) p.x = -this.spaceWidth/2;\r\n            if(p.y > this.spaceHeight/2) p.y = -this.spaceHeight/2;\r\n            if(p.x < -this.spaceWidth /2) p.x = this.spaceWidth/2;\r\n            if(p.y < -this.spaceHeight/2) p.y = this.spaceHeight/2;\r\n            obj.refreshToPhysics();\r\n        });\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Ship);\r\n        serializer.registerClass(Aviary);\r\n        serializer.registerClass(Bullet);\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n\r\n        super.processInput(inputData, playerId);\r\n\r\n        // handle keyboard presses\r\n        let playerShip = this.world.queryObject({ playerId: playerId, instanceType: Ship });\r\n        if (playerShip) {\r\n            if (inputData.input === 'up') playerShip.physicsObj.applyForceLocal([0, this.shipSpeed]);\r\n            else if (inputData.input === 'right') playerShip.physicsObj.angle -= this.shipTurnSpeed;\r\n            else if (inputData.input === 'left') playerShip.physicsObj.angle += this.shipTurnSpeed;\r\n            else if (inputData.input === 'space') this.emit('shoot', playerShip);\r\n            playerShip.refreshFromPhysics();\r\n        }\r\n    }\r\n\r\n    // returns a random number between -0.5 and 0.5\r\n    rand() {\r\n        return Math.random() - 0.5;\r\n    }\r\n\r\n    // create ship\r\n    addShip(playerId) {\r\n        let s = new Ship(this, {}, {\r\n            playerId: playerId,\r\n            mass: 10, angularVelocity: 0,\r\n            position: new TwoVector(0, 0), velocity: new TwoVector(0, 0)\r\n        });\r\n        s.lives = this.lives;\r\n        this.addObjectToWorld(s);\r\n    }\r\n\r\n    // create asteroids\r\n    addAviary() {\r\n        let x = this.rand() * this.spaceWidth;\r\n        let y = this.rand() * this.spaceHeight;\r\n        let vx = 0;\r\n        let vy = 0;\r\n        let va = 0;\r\n\r\n        let a = new Aviary(this, {}, {\r\n            mass: 10,\r\n            position: new TwoVector(x, y),\r\n            velocity: new TwoVector(vx, vy),\r\n            angularVelocity: va\r\n        });\r\n        this.addObjectToWorld(a);\r\n    }\r\n\r\n    // asteroid explosion\r\n    explode(asteroid, bullet) {\r\n\r\n        // Remove asteroid and bullet\r\n        let asteroidBody = asteroid.physicsObj;\r\n        let level = asteroid.level;\r\n        let x = asteroidBody.position[0];\r\n        let y = asteroidBody.position[1];\r\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\r\n        this.removeObjectFromWorld(asteroid);\r\n        this.removeObjectFromWorld(bullet);\r\n\r\n        // Add new sub-asteroids\r\n        if (level < 3) {\r\n            let angleDisturb = Math.PI/2 * Math.random();\r\n            for (let i=0; i<4; i++) {\r\n                let angle = Math.PI/2 * i + angleDisturb;\r\n                let subAsteroid = new Asteroid(this, {}, {\r\n                    mass: 10,\r\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\r\n                    velocity: new TwoVector(this.rand(), this.rand())\r\n                });\r\n                subAsteroid.level = level + 1;\r\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\r\n                this.addObjectToWorld(subAsteroid);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"AsteroidsGameEngine.js"}