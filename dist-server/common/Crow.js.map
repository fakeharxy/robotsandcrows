{"version":3,"sources":["../../src/common/Crow.js"],"names":["game","p2","Crow","gameEngine","physicsEngine","physicsObj","Body","mass","damping","angularDamping","position","x","y","velocity","shape","Circle","radius","crowRadius","collisionGroup","CROW","collisionMask","ROBOT","addShape","world","addBody","removeBody","other","message","messageAngle","max","angularVelocity","percent","Object","assign","type","BaseTypes","TYPES","STRING","FLOAT32","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,I;;;;;;;;;;;;;mCAmBF;AACXF,MAAAA,IAAI,GAAG,KAAKG,UAAZ;AACAF,MAAAA,EAAE,GAAGD,IAAI,CAACI,aAAL,CAAmBH,EAAxB;AAEA,WAAKI,UAAL,GAAkB,IAAIJ,EAAE,CAACK,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,KAAKA,IADe;AACTC,QAAAA,OAAO,EAAE,CADA;AACGC,QAAAA,cAAc,EAAE,CADnB;AAE1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAFgB;AAG1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcF,CAAf,EAAkB,KAAKE,QAAL,CAAcD,CAAhC;AAHgB,OAAZ,CAAlB,CAJW,CAUV;;AACD,UAAIE,KAAK,GAAG,IAAIb,EAAE,CAACc,MAAP,CAAc;AACtBC,QAAAA,MAAM,EAAEhB,IAAI,CAACiB,UADS;AAEtBC,QAAAA,cAAc,EAAElB,IAAI,CAACmB,IAFC;AAEK;AAC3BC,QAAAA,aAAa,EAAEpB,IAAI,CAACqB,KAHE,CAGI;;AAHJ,OAAd,CAAZ;AAKA,WAAKhB,UAAL,CAAgBiB,QAAhB,CAAyBR,KAAzB;AACAd,MAAAA,IAAI,CAACI,aAAL,CAAmBmB,KAAnB,CAAyBC,OAAzB,CAAiC,KAAKnB,UAAtC;AACH;;;sCAEiBF,U,EAAY;AAC1BH,MAAAA,IAAI,CAACI,aAAL,CAAmBmB,KAAnB,CAAyBE,UAAzB,CAAoC,KAAKpB,UAAzC;AACH;;;2BAEMqB,K,EAAO;AACV,uEAAaA,KAAb;;AACA,WAAKC,OAAL,GAAeD,KAAK,CAACC,OAArB;AACA,WAAKC,YAAL,GAAoBF,KAAK,CAACE,YAA1B;AACH;;;+BAEU;AACP,qHAA4C,KAAKD,OAAjD;AACH;;;AA1CD;AACA;AACA;wBACc;AACV,aAAO;AACHjB,QAAAA,QAAQ,EAAE;AAAEmB,UAAAA,GAAG,EAAE;AAAP,SADP;AAEHC,QAAAA,eAAe,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAFd,OAAP;AAIH;;;wBAfsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBN,QAAAA,OAAO,EAAE;AAAEO,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB,SADQ;AAEjBT,QAAAA,YAAY,EAAE;AAAEM,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBE;AAAxB;AAFG,OAAd,iDAAP;AAIH;;;;EAP6BC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\r\n\r\nlet game = null;\r\nlet p2 = null;\r\n\r\nexport default class Crow extends PhysicalObject2D {\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            message: { type: BaseTypes.TYPES.STRING },\r\n            messageAngle: { type: BaseTypes.TYPES.FLOAT32 }\r\n        }, super.netScheme);\r\n    }\r\n\r\n    // position bending: bend fully to server position in each sync [percent=1.0],\r\n    // unless the position difference is larger than 4.0 (i.e. wrap beyond bounds)\r\n    // no angular velocity bending\r\n    get bending() {\r\n        return { \r\n            position: { max: 4.0 },\r\n            angularVelocity: { percent: 0.0 }\r\n        };\r\n    }\r\n\r\n    onAddToWorld() {\r\n        game = this.gameEngine;\r\n        p2 = game.physicsEngine.p2;\r\n\r\n        this.physicsObj = new p2.Body({\r\n            mass: this.mass, damping: 0, angularDamping: 0,\r\n            position: [this.position.x, this.position.y],\r\n            velocity: [this.velocity.x, this.velocity.y]\r\n        });\r\n\r\n         // Create crow shape\r\n        let shape = new p2.Circle({\r\n            radius: game.crowRadius,\r\n            collisionGroup: game.CROW, // Belongs to the CROW group\r\n            collisionMask: game.ROBOT // Can only collide with the ROBOT group\r\n        });\r\n        this.physicsObj.addShape(shape);\r\n        game.physicsEngine.world.addBody(this.physicsObj);\r\n    }\r\n\r\n    onRemoveFromWorld(gameEngine) {\r\n        game.physicsEngine.world.removeBody(this.physicsObj);\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        this.message = other.message;\r\n        this.messageAngle = other.messageAngle;\r\n    }\r\n\r\n    toString() {\r\n        return `Crow::${super.toString()} message=${this.message}`;\r\n    }\r\n}\r\n"],"file":"Crow.js"}