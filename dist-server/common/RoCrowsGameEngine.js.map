{"version":3,"sources":["../../src/common/RoCrowsGameEngine.js"],"names":["RoCrowsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","steerCrows","Object","assign","spaceWidth","spaceHeight","aviaryRadius","crowRadius","robotSize","crowSpeed","robotSpeed","ROBOT","Math","pow","CROW","AVIARY","queryObjects","instanceType","Crow","forEach","crow","robot","queryObject","playerId","Robot","vecBearing","TwoVector","copy","position","subtract","scaleFactor","length","multiplyScalar","velocity","refreshToPhysics","forEachObject","id","obj","p","x","y","serializer","registerClass","Aviary","inputData","playerAviary","emit","input","random","rand","vx","vy","va","a","mass","angularVelocity","addObjectToWorld","playerAviaryBody","physicsObj","s","direction","c","message","angle","PI","removeObjectFromWorld","console","log","robot1","robot2","asteroid","bullet","asteroidBody","level","r","asteroidRadius","numAsteroidLevels","angleDisturb","i","subAsteroid","Asteroid","cos","sin","trace","info","toString","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\r\nimport Aviary from './Aviary';\r\nimport Crow from './Crow';\r\nimport Robot from './Robot';\r\n\r\nexport default class RoCrowsGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n\r\n        // create physics with no friction; wrap positions after each step\r\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\r\n        this.physicsEngine.world.defaultContactMaterial.friction = 0;\r\n        this.on('postStep', this.warpAll.bind(this));\r\n\r\n        //steer crows towards robots each step\r\n        this.on('postStep', this.steerCrows.bind(this));\r\n\r\n\r\n        // game variables\r\n        Object.assign(this, {\r\n            /*\r\n            lives: 3, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\r\n            asteroidRadius: 0.9, numAsteroidLevels: 4, numAsteroidVerts: 6, maxAsteroidSpeed: 2,\r\n            */\r\n            spaceWidth: 16, spaceHeight: 9, \r\n\r\n            aviaryRadius: 0.1,\r\n            crowRadius: 0.06,\r\n            robotSize: 0.2,\r\n\r\n            crowSpeed: 1,\r\n            robotSpeed: 0.5,\r\n\r\n            // collision groups\r\n            ROBOT: Math.pow(2, 1), CROW: Math.pow(2, 2), AVIARY: Math.pow(2, 3),\r\n        });\r\n    }\r\n\r\n    // steer the crows towards their players' robots\r\n    steerCrows() {\r\n        this.world.queryObjects({ instanceType: Crow }).forEach(crow => {\r\n            // find corresponding robot\r\n            let robot = this.world.queryObject({ playerId: crow.playerId, instanceType: Robot });\r\n            if (robot) {\r\n              // calculate crow vector based on target robot\r\n              let vecBearing = new TwoVector();\r\n              vecBearing.copy(robot.position);\r\n              vecBearing.subtract(crow.position);\r\n              let scaleFactor = this.crowSpeed / vecBearing.length();\r\n              vecBearing.multiplyScalar(scaleFactor);\r\n              crow.velocity = vecBearing;\r\n              crow.refreshToPhysics();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // If the body is out of space bounds, warp it to the other side\r\n    warpAll() {\r\n        this.world.forEachObject((id, obj) => {\r\n            let p = obj.position;\r\n            if(p.x > this.spaceWidth/2) p.x = -this.spaceWidth/2;\r\n            if(p.y > this.spaceHeight/2) p.y = -this.spaceHeight/2;\r\n            if(p.x < -this.spaceWidth /2) p.x = this.spaceWidth/2;\r\n            if(p.y < -this.spaceHeight/2) p.y = this.spaceHeight/2;\r\n            obj.refreshToPhysics();\r\n        });\r\n    }\r\n\r\n    registerClasses(serializer) {\r\n        serializer.registerClass(Robot);\r\n        serializer.registerClass(Aviary);\r\n        serializer.registerClass(Crow);\r\n    }\r\n\r\n    processInput(inputData, playerId) {\r\n\r\n        super.processInput(inputData, playerId);\r\n\r\n        // handle keyboard presses\r\n        // if immediate responses are required, they can be handled here but use extreme caution (or learn about shadow objects) if new objects will have to be created\r\n        let playerAviary = this.world.queryObject({ playerId: playerId, instanceType: Aviary });\r\n        if (playerAviary) {\r\n            this.emit('releaseCrow', playerAviary, inputData.input);\r\n        }\r\n    }\r\n\r\n    // returns a random number between -0.5 and 0.5\r\n    rand() {\r\n        return Math.random() - 0.5;\r\n    }\r\n\r\n    // create aviary\r\n    addAviary(playerId) {\r\n        let x = this.rand() * this.spaceWidth;\r\n        let y = this.rand() * this.spaceHeight;\r\n        let vx = 0;\r\n        let vy = 0;\r\n        let va = 0;\r\n        \r\n        let a = new Aviary(this, {}, {\r\n            playerId: playerId,\r\n            mass: 100, angularVelocity: va,\r\n            position: new TwoVector(x, y),\r\n            velocity: new TwoVector(vx, vy)\r\n        });\r\n        this.addObjectToWorld(a);\r\n    }\r\n    \r\n    // create robot\r\n    addRobot(playerId) {\r\n        //find player's aviary and place robot nearby\r\n        let playerAviaryBody = this.world.queryObject({ playerId: playerId, instanceType: Aviary }).physicsObj;\r\n        let x = playerAviaryBody.position[0];\r\n        x += this.aviaryRadius * 3 * (x > 0 ? -1 : 1);\r\n        let y = playerAviaryBody.position[1];\r\n        y += this.aviaryRadius * 3 * (y > 0 ? -1 : 1);\r\n        let vx = 0;\r\n        let vy = 0;\r\n\r\n        let s = new Robot(this, {}, {\r\n            playerId: playerId,\r\n            mass: 10, angularVelocity: 0,\r\n            position: new TwoVector(x, y), \r\n            velocity: new TwoVector(vx, vy)\r\n        });\r\n        //s.lives = this.lives;\r\n        this.addObjectToWorld(s);\r\n    }\r\n    \r\n    addCrow(playerAviary, direction) {\r\n        //release a crow from the aviary\r\n        let vx = 0;\r\n        let vy = 0;\r\n\r\n        let c = new Crow(this, {}, {\r\n            playerId: playerAviary.playerId,\r\n            mass: 0.0001, angularVelocity: 0,\r\n            position: playerAviary.position, //is copied anyway\r\n            velocity: new TwoVector(vx, vy)\r\n        });\r\n        c.message = direction;\r\n        this.addObjectToWorld(c);\r\n    }\r\n\r\n    // crow has arrived at a robot; can possibly deliver message\r\n    crowArrived(crow, robot) {\r\n        if (crow.playerId === robot.playerId) {\r\n            //console.log(\"crow delivered message \" + crow.message);\r\n            if (crow.message === 'up') {\r\n                robot.velocity = new TwoVector(0, this.robotSpeed);\r\n                robot.angle = 0;\r\n            } else if (crow.message === 'right') {\r\n                robot.velocity = new TwoVector(this.robotSpeed, 0);\r\n                robot.angle = Math.PI / 2;\r\n            } else if (crow.message === 'left') {\r\n                robot.velocity = new TwoVector(-this.robotSpeed, 0);\r\n                robot.angle = -Math.PI / 2\r\n            } else if (crow.message === 'down') {\r\n                robot.velocity = new TwoVector(0, -this.robotSpeed);\r\n                robot.angle = Math.PI;\r\n            }\r\n            robot.angularVelocity = 0;\r\n            robot.refreshToPhysics();\r\n            this.removeObjectFromWorld(crow.id);\r\n        } else {\r\n            console.log(\"crow flew over competitor robot\");\r\n        }\r\n    }\r\n\r\n    // two robots have hit each other TODO dead stop? bounce? damage?\r\n    robotCrash(robot1, robot2) {\r\n        console.log(\"robot crash!\");\r\n    }\r\n\r\n    // asteroid explosion\r\n    explode(asteroid, bullet) {\r\n\r\n        // Remove asteroid and bullet\r\n        let asteroidBody = asteroid.physicsObj;\r\n        let level = asteroid.level;\r\n        let x = asteroidBody.position[0];\r\n        let y = asteroidBody.position[1];\r\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\r\n        this.removeObjectFromWorld(asteroid);\r\n        this.removeObjectFromWorld(bullet);\r\n\r\n        // Add new sub-asteroids\r\n        if (level < 3) {\r\n            let angleDisturb = Math.PI/2 * Math.random();\r\n            for (let i=0; i<4; i++) {\r\n                let angle = Math.PI/2 * i + angleDisturb;\r\n                let subAsteroid = new Asteroid(this, {}, {\r\n                    mass: 10,\r\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\r\n                    velocity: new TwoVector(this.rand(), this.rand())\r\n                });\r\n                subAsteroid.level = level + 1;\r\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\r\n                this.addObjectToWorld(subAsteroid);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"RoCrowsGameEngine.js"}