{"version":3,"sources":["../../src/common/Robot.js"],"names":["game","p2","Robot","gameEngine","physicsEngine","shape","Box","width","robotSize","height","collisionGroup","ROBOT","collisionMask","AVIARY","CROW","physicsObj","Body","mass","position","x","y","angle","damping","angularDamping","addShape","world","addBody","removeBody","lives","other","grabberActive","max","Object","assign","type","BaseTypes","TYPES","INT8","PhysicalObject2D"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAIA,IAAI,GAAG,IAAX;AACA,IAAIC,EAAE,GAAG,IAAT;;IAEqBC,K;;;;;;;;;;;;;iCAkBJC,U,EAAY;AACrBH,MAAAA,IAAI,GAAGG,UAAP;AACAF,MAAAA,EAAE,GAAGE,UAAU,CAACC,aAAX,CAAyBH,EAA9B,CAFqB,CAIrB;;AACA,WAAKI,KAAL,GAAa,IAAIJ,EAAE,CAACK,GAAP,CAAW;AACpBC,QAAAA,KAAK,EAAEP,IAAI,CAACQ,SADQ;AAEpBC,QAAAA,MAAM,EAAET,IAAI,CAACQ,SAFO;AAGpBE,QAAAA,cAAc,EAAEV,IAAI,CAACW,KAHD;AAGQ;AAC5BC,QAAAA,aAAa,EAAEZ,IAAI,CAACW,KAAL,GAAaX,IAAI,CAACa,MAAlB,GAA2Bb,IAAI,CAACc,IAJ3B,CAIgC;;AAJhC,OAAX,CAAb;AAMA,WAAKC,UAAL,GAAkB,IAAId,EAAE,CAACe,IAAP,CAAY;AAC1BC,QAAAA,IAAI,EAAE,CADoB;AAE1BC,QAAAA,QAAQ,EAAE,CAAC,KAAKA,QAAL,CAAcC,CAAf,EAAkB,KAAKD,QAAL,CAAcE,CAAhC,CAFgB;AAG1BC,QAAAA,KAAK,EAAE,KAAKA,KAHc;AAI1BC,QAAAA,OAAO,EAAE,CAJiB;AAIdC,QAAAA,cAAc,EAAE;AAJF,OAAZ,CAAlB;AAKA,WAAKR,UAAL,CAAgBS,QAAhB,CAAyB,KAAKnB,KAA9B;AACAF,MAAAA,UAAU,CAACC,aAAX,CAAyBqB,KAAzB,CAA+BC,OAA/B,CAAuC,KAAKX,UAA5C;AACH;;;sCAEiBZ,U,EAAY;AAC1BH,MAAAA,IAAI,CAACI,aAAL,CAAmBqB,KAAnB,CAAyBE,UAAzB,CAAoC,KAAKZ,UAAzC;AACH;;;+BAEU;AACP,qHAA2C,KAAKa,KAAhD;AACH;;;2BAEMC,K,EAAO;AACV,wEAAaA,KAAb,EADU,CAEV;;;AACA,WAAKC,aAAL,GAAqBD,KAAK,CAACC,aAA3B;AACH;;;AA1CD;AACA;wBACc;AACV,aAAO;AACHZ,QAAAA,QAAQ,EAAE;AAAEa,UAAAA,GAAG,EAAE;AAAP,SADP,CAEH;AACA;;AAHG,OAAP;AAKH;;;wBAdsB;AACnB,aAAOC,MAAM,CAACC,MAAP,CAAc;AACjBH,QAAAA,aAAa,EAAE;AAAEI,UAAAA,IAAI,EAAEC,mBAAUC,KAAV,CAAgBC;AAAxB;AADE,OAAd,kDAAP;AAGH;;;;EAN8BC,yB","sourcesContent":["import { PhysicalObject2D, BaseTypes } from 'lance-gg';\r\n\r\nlet game = null;\r\nlet p2 = null;\r\n\r\nexport default class Robot extends PhysicalObject2D {\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            grabberActive: { type: BaseTypes.TYPES.INT8 }\r\n        }, super.netScheme);\r\n    }\r\n   \r\n    // no position bending if difference is larger than 4.0 (i.e. wrap beyond bounds),\r\n    // TODO which is needed? no angular velocity bending, no local angle bending\r\n    get bending() {\r\n        return {\r\n            position: { max: 4.0 },\r\n            //angularVelocity: { percent: 0.0 },\r\n            //angleLocal: { percent: 0.0 }\r\n        };\r\n    }\r\n\r\n    onAddToWorld(gameEngine) {\r\n        game = gameEngine;\r\n        p2 = gameEngine.physicsEngine.p2;\r\n\r\n        // Add robot physics\r\n        this.shape = new p2.Box({\r\n            width: game.robotSize,\r\n            height: game.robotSize,\r\n            collisionGroup: game.ROBOT, // Belongs to the ROBOT group\r\n            collisionMask: game.ROBOT | game.AVIARY | game.CROW // collide with anything\r\n        });\r\n        this.physicsObj = new p2.Body({\r\n            mass: 1,\r\n            position: [this.position.x, this.position.y],\r\n            angle: this.angle,\r\n            damping: 0, angularDamping: 0.9 });\r\n        this.physicsObj.addShape(this.shape);\r\n        gameEngine.physicsEngine.world.addBody(this.physicsObj);\r\n    }\r\n\r\n    onRemoveFromWorld(gameEngine) {\r\n        game.physicsEngine.world.removeBody(this.physicsObj);\r\n    }\r\n\r\n    toString() {\r\n        return `Robot::${super.toString()} lives=${this.lives}`;\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        //this.lives = other.lives;\r\n        this.grabberActive = other.grabberActive;\r\n    }\r\n}\r\n"],"file":"Robot.js"}