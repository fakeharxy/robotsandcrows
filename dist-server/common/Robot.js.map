{"version":3,"sources":["../../src/common/Robot.js"],"names":["GRAB_INACTIVE","GRAB_SEARCHING","GRAB_HOLDING","game","p2","Robot","gameEngine","physicsEngine","grabState","shape","Box","width","robotSize","height","collisionGroup","ROBOT","collisionMask","AVIARY","CROW","physicsObj","Body","mass","position","x","y","angle","damping","angularDamping","addShape","world","addBody","removeBody","grabbedObject","grabVector","TwoVector","grabReach","Math","sin","cos","velocity","copy","refreshToPhysics","grabConstraint","removeConstraint","undefined","object","updateGrabbedObject","DistanceConstraint","collideConnected","addConstraint","lives","other","max","Object","assign","type","BaseTypes","TYPES","INT8","PhysicalObject2D"],"mappings":"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","sourcesContent":["import { PhysicalObject2D, BaseTypes, TwoVector } from 'lance-gg';\r\n\r\nconst GRAB_INACTIVE = 0;\r\nconst GRAB_SEARCHING = 1;\r\nconst GRAB_HOLDING = 2;\r\n\r\nlet game = null;\r\nlet p2 = null;\r\n\r\nexport default class Robot extends PhysicalObject2D {\r\n\r\n    static get netScheme() {\r\n        return Object.assign({\r\n            grabState: { type: BaseTypes.TYPES.INT8 }\r\n        }, super.netScheme);\r\n    }\r\n   \r\n    // no position bending if difference is larger than 4.0 (i.e. wrap beyond bounds),\r\n    // TODO which is needed? no angular velocity bending, no local angle bending\r\n    get bending() {\r\n        return {\r\n            position: { max: 4.0 },\r\n            //angularVelocity: { percent: 0.0 },\r\n            //angleLocal: { percent: 0.0 }\r\n        };\r\n    }\r\n\r\n    onAddToWorld(gameEngine) {\r\n        game = gameEngine;\r\n        p2 = gameEngine.physicsEngine.p2;\r\n\r\n        this.grabState = GRAB_INACTIVE;\r\n\r\n        // Add robot physics\r\n        this.shape = new p2.Box({\r\n            width: game.robotSize,\r\n            height: game.robotSize,\r\n            collisionGroup: game.ROBOT, // Belongs to the ROBOT group\r\n            collisionMask: game.ROBOT | game.AVIARY | game.CROW // collide with anything\r\n        });\r\n        this.physicsObj = new p2.Body({\r\n            mass: 1,\r\n            position: [this.position.x, this.position.y],\r\n            angle: this.angle,\r\n            damping: 0, angularDamping: 0.9 });\r\n        this.physicsObj.addShape(this.shape);\r\n        gameEngine.physicsEngine.world.addBody(this.physicsObj);\r\n    }\r\n\r\n    onRemoveFromWorld(gameEngine) {\r\n        game.physicsEngine.world.removeBody(this.physicsObj);\r\n    }\r\n\r\n    updateGrabbedObject() {\r\n        //also update position and velocity of grabbed object\r\n        if (this.grabbedObject) {\r\n            let grabVector = new TwoVector(this.physicsObj.position[0] + game.grabReach * Math.sin(this.physicsObj.angle), this.physicsObj.position[1] + game.grabReach * Math.cos(this.physicsObj.angle));\r\n            this.grabbedObject.position = grabVector;\r\n            this.grabbedObject.velocity.copy(this.velocity);\r\n            this.grabbedObject.refreshToPhysics();\r\n        }\r\n    }\r\n\r\n    setGrabInactive() {\r\n        this.grabState = GRAB_INACTIVE;\r\n\r\n        if (this.grabConstraint) {\r\n            game.physicsEngine.world.removeConstraint(this.grabConstraint);\r\n        }\r\n\r\n        if (this.grabbedObject) {\r\n            this.grabbedObject.velocity = new TwoVector(0,0);\r\n            this.grabbedObject.refreshToPhysics();\r\n            this.grabbedObject = undefined;\r\n        }\r\n    }\r\n    \r\n    setGrabSearching() {\r\n        this.grabState = GRAB_SEARCHING;\r\n    }\r\n\r\n    setGrabHolding(object) {\r\n        this.grabState = GRAB_HOLDING;\r\n        this.grabbedObject = object;\r\n        this.updateGrabbedObject(); //snap the grabbed object to its correct position\r\n        this.grabConstraint = new game.physicsEngine.p2.DistanceConstraint(this.physicsObj, object.physicsObj, { collideConnected: false} );\r\n        game.physicsEngine.world.addConstraint(this.grabConstraint);\r\n    }\r\n\r\n    isGrabInactive() {\r\n        return this.grabState === GRAB_INACTIVE;\r\n    }\r\n\r\n    isGrabSearching() {\r\n        return this.grabState === GRAB_SEARCHING;\r\n    }\r\n\r\n    isGrabHolding() {\r\n        return this.grabState === GRAB_HOLDING;\r\n    }\r\n\r\n\r\n    toString() {\r\n        return `Robot::${super.toString()} lives=${this.lives}`;\r\n    }\r\n\r\n    syncTo(other) {\r\n        super.syncTo(other);\r\n        //this.lives = other.lives;\r\n        this.grabState = other.grabState;\r\n    }\r\n}\r\n"],"file":"Robot.js"}