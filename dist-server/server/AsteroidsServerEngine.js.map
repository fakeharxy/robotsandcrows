{"version":3,"sources":["../../src/server/AsteroidsServerEngine.js"],"names":["AsteroidsServerEngine","io","gameEngine","inputOptions","physicsEngine","world","on","handleCollision","bind","shoot","addAsteroids","evt","A","B","forEachObject","id","obj","physicsObj","bodyA","bodyB","trace","toString","Bullet","Asteroid","explode","Ship","kill","queryObjects","instanceType","length","player","radius","shapes","angle","Math","PI","bullet","mass","position","TwoVector","cos","sin","velocity","angularVelocity","addObjectToWorld","timer","add","bulletLifeTime","destroyBullet","bulletId","objects","removeObjectFromWorld","ship","lives","socket","addShip","playerId","socketId","o","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine, TwoVector } from 'lance-gg';\r\nimport Asteroid from '../common/Asteroid';\r\nimport Bullet from '../common/Bullet';\r\nimport Ship from '../common/Ship';\r\n\r\nexport default class AsteroidsServerEngine extends ServerEngine {\r\n\r\n    constructor(io, gameEngine, inputOptions) {\r\n        super(io, gameEngine, inputOptions);\r\n        gameEngine.physicsEngine.world.on('beginContact', this.handleCollision.bind(this));\r\n        gameEngine.on('shoot', this.shoot.bind(this));\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n        this.gameEngine.addAsteroids();\r\n    }\r\n\r\n    // handle a collision on server only\r\n    handleCollision(evt) {\r\n\r\n        // identify the two objects which collided\r\n        let A;\r\n        let B;\r\n        this.gameEngine.world.forEachObject((id, obj) => {\r\n            if (obj.physicsObj === evt.bodyA) A = obj;\r\n            if (obj.physicsObj === evt.bodyB) B = obj;\r\n        });\r\n\r\n        // check bullet-asteroid and ship-asteroid collisions\r\n        if (!A || !B) return;\r\n        this.gameEngine.trace.trace(() => `collision between A=${A.toString()}`);\r\n        this.gameEngine.trace.trace(() => `collision and     B=${B.toString()}`);\r\n        if (A instanceof Bullet && B instanceof Asteroid) this.gameEngine.explode(B, A);\r\n        if (B instanceof Bullet && A instanceof Asteroid) this.gameEngine.explode(A, B);\r\n        if (A instanceof Ship && B instanceof Asteroid) this.kill(A);\r\n        if (B instanceof Ship && A instanceof Asteroid) this.kill(B);\r\n\r\n        // restart game\r\n        if (this.gameEngine.world.queryObjects({ instanceType: Asteroid }).length === 0) this.gameEngine.addAsteroids();\r\n    }\r\n\r\n    // shooting creates a bullet\r\n    shoot(player) {\r\n\r\n        let radius = player.physicsObj.shapes[0].radius;\r\n        let angle = player.physicsObj.angle + Math.PI / 2;\r\n        let bullet = new Bullet(this.gameEngine, {}, {\r\n            mass: 0.05,\r\n            position: new TwoVector(\r\n                radius * Math.cos(angle) + player.physicsObj.position[0],\r\n                radius * Math.sin(angle) + player.physicsObj.position[1]\r\n            ),\r\n            velocity: new TwoVector(\r\n                2 * Math.cos(angle) + player.physicsObj.velocity[0],\r\n                2 * Math.sin(angle) + player.physicsObj.velocity[1]\r\n            ),\r\n            angularVelocity: 0\r\n        });\r\n        let obj = this.gameEngine.addObjectToWorld(bullet);\r\n        this.gameEngine.timer.add(this.gameEngine.bulletLifeTime, this.destroyBullet, this, [obj.id]);\r\n    }\r\n\r\n    // destroy the missile if it still exists\r\n    destroyBullet(bulletId) {\r\n        if (this.gameEngine.world.objects[bulletId]) {\r\n            this.gameEngine.trace.trace(() => `bullet[${bulletId}] destroyed`);\r\n            this.gameEngine.removeObjectFromWorld(bulletId);\r\n        }\r\n    }\r\n\r\n    kill(ship) {\r\n        if(ship.lives-- === 0) this.gameEngine.removeObjectFromWorld(ship.id);\r\n    }\r\n\r\n    onPlayerConnected(socket) {\r\n        super.onPlayerConnected(socket);\r\n        this.gameEngine.addShip(socket.playerId);\r\n    }\r\n\r\n    onPlayerDisconnected(socketId, playerId) {\r\n        super.onPlayerDisconnected(socketId, playerId);\r\n        for (let o of this.gameEngine.world.queryObjects({ playerId }))\r\n            this.gameEngine.removeObjectFromWorld(o.id);\r\n    }\r\n}\r\n"],"file":"AsteroidsServerEngine.js"}